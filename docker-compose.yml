version: '3.8'
services:
  console:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/do_control
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - API_HOST=console
      - API_PORT=8000
      - DO_API_TOKEN=${DO_API_TOKEN}
    command: >
      sh -c "python console/scripts/init_rabbitmq.py &&
             uvicorn console.main:app --host 0.0.0.0 --port 8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=do_control
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
    depends_on:
      console:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - CONSOLE_URL=http://console:8000
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    deploy:
      mode: replicated
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      
volumes:
  postgres_data: